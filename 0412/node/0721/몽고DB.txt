SQL(관계형 데이터베이스)에는 핵심적인 두 가지 특징이 있다.
-데이터는 정해진 데이터 스키마에 따라 테이블에 저장된다.
-데이터는 관계를 통해 여러 테이블에 분산된다.

NoSQL (비관계형 DB)
-스키마도 없고, 관계도 없음

SQL 장점
-명확하게 정의된 스키마, 데이터 무결성 보장
-관계는 각 데이터를 중복없이 한번만 저장

SQL 단점
-덜 유연함. 데이터 스키마를 사전에 계획하고 알려야 함. (나중에 수정하기 힘듬)
-관계를 맺고 있어서 조인문이 많은 복잡한 쿼리가 만들어질 수 있음
-대체로 수직적 확장만 가능함

NoSQL 장점
-스키마가 없어서 유연함. 언제든지 저장된 데이터를 조정하고 새로운 필드 추가 가능
-데이터는 애플리케이션이 필요로 하는 형식으로 저장됨. 데이터 읽어오는 속도 빨라짐
-수직 및 수평 확장이 가능해서 애플리케이션이 발생시키는 모든 읽기/쓰기 요청 처리 가능

NoSQL 단점
-유연성으로 인해 데이터 구조 결정을 미루게 될 수 있음
-데이터 중복을 계속 업데이트 해야 함
-데이터가 여러 컬렉션에 중복되어 있기 때문에 수정 시 모든 컬렉션에서 수행해야 함 (SQL에서는 중복 데이터가 없으므로 한번만 수행이 가능)

[MongoDB 문법] no sql

데이터베이스 확인
show dbs;

데이터베이스 생성 및 선택
use 데이터베이스명;
use frontenddb;
* 데이터베이스가 없으면 생성, 있으면 선택합니다.
* 데이터베이스의 자료가 없을 경우 show dbs에서 나타나지 않습니다.

컬렉션 생성
db.createCollection('컬렉션명');
db.createCollection('testCollection');
결과{"ok":1}


컬렉션 확인
show collections;

컬렉션 삭제
db.컬렉션명.drop();
db.testCollection.drop();
결과 true

연습용 컬렉션 만들기
db.createCollection("member");

document 추가
db.컬렉션명.insert(객체);
db.member.insert({'userid':'apple','userpw':'1111'});
db.member.insert({'userid':'banana','userpw':'2222','username':'반하나'});
db.member.insert({"userid":"orange","userpw":"3333","gender":"남자"});
db.member.insert({"userid":"melon","userpw":"4444","gender":"남자", "username":"이메론"});
db.member.insert({"userid":"cherry","userpw":"5555", "username":"채리","gender":"여자","point":2000});
db.member.insert({"userid":"avocado","userpw":"6666", "username":"안카도","gender":"남자","point":1500});
db.member.insert({"userid":"berry","userpw":"7777", "username":"배애리","gender":"여자","point":1800});
db.member.insert({"userid":"coconut","userpw":"8888", "username":"고코넛","gender":"남자","point":1700});

document 확인
db.컬렉션명.find();
db.컬렉션명.find().pretty();
db.컬렉션명.find(객체).pretty();
db.member.find();
db.member.find().pretty();
db.member.find({"userid":"apple"}).pretty();