

Node.js
1. 백엔드 개발자가 사용하는 언어입니다.
2. 서버에서 실행되는 자바스크립트 환경입니다.
3. Google V8 JavaScript 엔진을 사용하여 코드를 실행하고 
   기본 모듈이 자바스크립트로 사용됩니다.
4. node.js에는 웹 서버(apache, tomcat, iis, zeus ..)과 같은 소프트웨어가 필요없이 
   웹 서버 역할을 할 수 있는 내장 라이브러리가 있습니다.
5. NPM이라는 패키지 관리자가 포함되어있습니다.
   NPM은 node.js의 프로그램을 설치하고 관리하는데 사용됩니다.

node.js 다운로드
https://nodejs.org
(LTS버전 다운로드)

node.js 버전 확인
cmd 창에서 node -v 명령어로 확인합니다.

npm 버전 확인
cmd 창에서 npm -v 명령어로 확인합니다.

package.json 파일 만들기
모듈을 관리하는 설정파일

폴더를 하나 생성하고 생성된 폴더를 노드의 서버설정
    npm init : 옵션을 직접 제공
    npm init -y : 기본값을 기준으로 바로 생성

노드를 실행하는 방법 
node 실행파일명    


FileSystem 모듈
파일처리와 관련된 모듈입니다. 
node.js에서 가장 중요하고 기초가 되는 모듈입니다.

메소드
readFile() : 파일을 비동기적으로 읽습니다.
readFileSync() : 파일을 동기적으로 읽습니다.
writeFile() : 파일을 비동기적으로 씁니다.
writeFileSync() : 파일을 동기적으로 씁니다.

* 동기와 비동기
프로그램이 동작하는 상태에서 완전히 해당 내용을 끝내고 다음으로 제어를 넘기는 방식을 동기식, 
동작이 끝나지 않은 상태에서도 제어권을 넘긴 후 프로그램을 계속 진행하면 비동기식이라고 합니다.


예외 처리(Exception)
프로그램이 실행되고 있는 런타임시에 에러가 발생할 경우 처리할 수 있는 프로그램 구간을 의미합니다.

try {
    예외 상황이 발생할 수 있는 문장
    ....
    ....
}catch(e){
    예외 상황이 발생했을 경우 처리할 문장(e는 Exception 객체)
}finally{
    예외 상황이 발생하거나 발생하지 않아도 무조건 실행될 문장(생략가능)
}

이벤트 루프(Event Loop)
node.js는 서버가 가동되면 변수들을 초기화하고 함수를 선언하고 이벤트가 발생할 때까지 기다립니다. 
이벤트가 감지되었을 때 call back 함수를 호출합니다.

events
이벤트 위주의 프로그램을 작성할 때 사용하는 모듈입니다.

메소드
on() : 지정한 이벤트의 리스너를 추가합니다.
once() : 지정한 이벤트의 리스너를 추가하지만 한번 실행 이후 자동 제거됩니다.
removelistener() : 지정한 이벤트에 대한 리스너를 제거합니다.
emit() : 지정한 이벤트를 발생시킵니다.



http 모듈
node.js에서 가장 기본적이고 중요한 서버 모듈(서버기능);
HTTP 웹 서버를 생성하는 것과 관련도닌 모든 기능을 담당

1. server 객체
http모듈의 createServer() 메소드를 사용하여 server객체를 생성합니다

메소드
listen(): 서버를 실행하고 클라이언트를 기다립니다
close(): 서버를 종료합니다

이벤트
request : 클라이언트가 서버에 요청할 때 발생하는 이벤트입니다.
connection : 클라이언트가 접속할 때 발생하는 이벤트입니다.
close : 서버가 종료될 때 발생하는 이벤트입니다.

2. request 객체(req)
클라이언트가 서버에 전달하는 메시지(정보)를 담은 객체

속성
method : 클라이언트 요청 방식을 나타냅니다. (GET, POST)
url : 클라이언트가 요청한 URL을 나타냅니다.

GET -> 웹브라우저 주소창에서 변수와값을 입력해서 값을 서버에 전달
http://주소/파일명?userid=aaaaa&username=김사과 

POST -> body영역 폼태그를 입력된 값을 서버에 전달
<!-- 
<form method="post">
  <input/>
  <button>
</form>
 -->


3. response 객체(res)
서버에서 클라이언트로 응답 메시지를 전송시켜주는 객체

메소드
writeHead() : 응답 헤더를 작성합니다. 응답하는 페이지에 정보를 선언
end() : 응답 본문을 작성합니다. 응답해서 보여줄 내용들을 선언

MIME 형식
text/plain : 일반적인 text 파일
text/html : html 형식 파일
text/css : css 형식 파일
text/xml : xml 형식 파일
image/jpeg : jpeg 이미지 파일
image/png : png 이미지 파일
video/mpeg : mpeg 동영상 파일
audio/mp3 : mp3 음악 파일