function 함수명(){
    실행문;
}

함수명();//함수를 실행하기 위해 호출


//특정 이벤트안에 있는 함수는 이벤트발생에 따라서 함수호출
대상.이벤트(function(){
     실행문;
 })




사용자 정의 함수(function)
하나의 특별한 목적의 작업을 수행하도록 설계된 독립적인 블록을 의미합니다
함수는 필요할 때마다 호출하여 해당 작업을 반복해서 수행하기 때문에 
코드를 재활용할 수 있습니다.

1. 이름만 존재하는 함수
- 함수 선언식
function 함수명(){  
    함수가 호출되었을 때 실행할 문장;
    ...
}
함수명();
---->단순 코드 블록이라서 단독으로 실행되지 않는다 
    함수명을 호출해야 함(함수명();)


---->Emcascript5에서 함수 표현방식
const 함수명 = function(){
    함수가 호출되었을때 실행문;
}

함수명();//함수호출


=>
* 자바스크립트는 함수를 변수에 저장이 가능
* 자바스크립트는 script 태그를 만나면 자바스크립트 파일을 먼저 읽고 
  선언된 함수를 먼저 메모리에 저장




2. 매개변수가 있는 함수

- 함수 선언식
function 함수명(매개변수1, 매개변수2 ..){
    함수가 호출되었을 때 실행할 문장;
    ...
}

- 디폴트 매개변수
매개변수의 값을 정하지 않으면 대신 기본값을 변수에 저장

function 함수명(매개변수1=값1, 매개변수2=값2, ..){
    함수가 호출되었을 때 실행할 문장;
    ...
}

- 나머지 매개변수
생략 접두사(...)를 사용하여 특정 위치의 인수부터 마지막 인수까지 한번에 지정할 수 있습니다.

function 함수명(매개변수1, 매개변수2, ...매개변수3){
    함수가 호출되었을 때 실행할 문장;
    ...
}

함수명(10, 20, 30, 40, 50, 60, 70);

함수명(값1, 값2 ...);




3. 리턴값이 있는 함수

function 함수명(매개변수1, 매개변수2 ..){
    함수가 호출되었을 때 실행할 문장;
    ...
    return 값;
}

const 상수 = 함수명(값1, 값2 ..);




화살표 함수
function 키워드를 사용하여 함수를 만드는 것보다 간단하게 표현합니다.
화살표 함수는 항상 익명입니다.

const 함수명 = (매개변수1, 매개변수2 ..) => 실행문 ..

함수명(); //함수호출

1. 매개변수가 없는 함수
const func1 = function() {
    console.log('안녕하세요, JavaScript!');
}

화살표 함수로 표현
const func1 = () => console.log('안녕하세요, JavaScript!');


2. 매개변수가 있는 함수
const func1 = x => console.log(`매개변수로 전달받은 값 : ${x}`);
const func2 = (x, y) => console.log(`두수의 합 : ${x + y}`);

3. 리턴값이 있는 함수
const func3 = (x, y) => {
     let sum = 0;
 for(let i=x; i<=y; i++){
      sum += i;
     }
     return sum;
}
const aaa = func3(1,100);

4. 동적으로 함수 생성
const age = 20;

const adult = (age > 18) ?
        () => alert('성인입니다');
        : () => alert('미성년입니다');

const adult = (age > 18) &&
        () => alert('성인입니다');


adult();